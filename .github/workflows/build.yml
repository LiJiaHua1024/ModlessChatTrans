name: Windows Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (optional, format: vx.x.x or x.x.x)'
        required: false
        default: ''
      keep_console:
        description: 'Keep console window'
        type: boolean
        required: false
        default: false
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
        echo "$env:USERPROFILE\.local\bin" >> $env:GITHUB_PATH
      shell: pwsh

    - name: Install dependencies with uv
      run: |
        uv sync
        uv add nuitka
      shell: pwsh

    - name: Download CTkScrollableDropdown
      run: |
        $zipUrl = 'https://github.com/Akascape/CTkScrollableDropdown/archive/refs/heads/main.zip'
        $tmpDir = "$env:RUNNER_TEMP\ctk_dropdown"
        $zipFile = "$tmpDir\dropdown.zip"

        New-Item -ItemType Directory -Path $tmpDir -Force | Out-Null
        Invoke-WebRequest -Uri $zipUrl -OutFile $zipFile
        Expand-Archive -Path $zipFile -DestinationPath $tmpDir -Force

        # 将源文件夹复制到 src 目录
        Copy-Item -Path "$tmpDir\CTkScrollableDropdown-main\CTkScrollableDropdown" `
                  -Destination "${{ github.workspace }}\src" -Recurse -Force

        # 复制第三方库许可证，确保遵循 MIT 许可要求
        $licenseDir = "${{ github.workspace }}\third_party_licenses"
        New-Item -ItemType Directory -Path $licenseDir -Force | Out-Null
        Copy-Item -Path "$tmpDir\CTkScrollableDropdown-main\LICENSE" `
                  -Destination "$licenseDir\CTkScrollableDropdown_LICENSE" -Force
      shell: pwsh

    - name: Determine version
      id: determine_version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $inputVersion = "${{ github.event.inputs.version }}"

            if ([string]::IsNullOrWhiteSpace($inputVersion)) {
                # 如果用户没有输入版本号，使用commit哈希的前8位
                $version = "${{ github.sha }}".Substring(0, 8)
                $fileVersion = "0.0.0.0"
                $productVersion = "0.0.0.0"
            }
            elseif ($inputVersion -match "^v?\d+\.\d+\.\d+$") {
                # 如果输入格式为vx.x.x或x.x.x
                $version = $inputVersion -replace "^v", ""
                $fileVersion = $version
                $productVersion = $version
            }
            else {
                # 如果输入格式不符合，使用用户输入内容
                $version = $inputVersion
                $fileVersion = "0.0.0.0"
                $productVersion = "0.0.0.0"
            }
        } else {
            # 自动触发时的处理
            $version = "${{ github.ref_name }}"
            if ($version -match "^v") {
              $version = $version.Substring(1)
            }
            $fileVersion = $version
            $productVersion = $version
        }

        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "file_version=$fileVersion" >> $env:GITHUB_OUTPUT
        echo "product_version=$productVersion" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Set tksvg path
      id: tksvg_path
      run: |
        $tksvgPath = uv run python -c "import os, tksvg; print(os.path.dirname(tksvg.__file__))"
        echo "TKSVG_PATH=$tksvgPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: pwsh

    - name: Build with Nuitka
      shell: pwsh
      run: |
        $version = "${{ steps.determine_version.outputs.version }}"
        $fileVersion = "${{ steps.determine_version.outputs.file_version }}"
        $productVersion = "${{ steps.determine_version.outputs.product_version }}"
        $keepConsole = "${{ github.event.inputs.keep_console }}"

        $commonArgs = @(
          '--onefile'
          '--standalone'
          '--msvc=latest'
          '--lto=yes'
          '--noinclude-pytest-mode=nofollow'
          '--windows-icon-from-ico=src/icon.ico'
          '--enable-plugin=tk-inter'
          '--include-module=dbm.dumb'
          '--include-package=urllib3'
          '--include-package=CTkScrollableDropdown'
          '--include-package=litellm'
          '--include-package=translators'
          '--include-package-data=certifi'
          '--include-package-data=tksvg'
          '--include-package-data=litellm'
          '--include-data-dir=src/locales=locales'
          '--include-data-dir=src/templates=templates'
          '--include-data-dir=src/static=static'
          '--include-data-dir=third_party_licenses=third_party_licenses'
          '--include-data-file=${{ env.TKSVG_PATH }}/libtksvg.dll=tksvg/libtksvg.dll'
          '--include-data-file=src/choose_language.svg=choose_language.svg'
          '--include-data-file=src/icon.ico=icon.ico'
          '--output-filename=ModlessChatTrans'
          '--file-description=ModlessChatTrans'
          '--product-name=ModlessChatTrans'
          '--copyright=Copyright © 2024-2025 LiJiaHua1024'
          '--assume-yes-for-downloads'
          "--file-version=$fileVersion"
          "--product-version=$productVersion"
        )

        # 只在非手动触发或手动触发时keep_console为false时禁用控制台
        if ("${{ github.event_name }}" -ne "workflow_dispatch" -or $keepConsole -ne "true") {
          $commonArgs += '--windows-console-mode=disable'
        }

        uv run nuitka @commonArgs src/main.py

    - name: Rename executable
      run: |
        $version = "${{ steps.determine_version.outputs.version }}"
        ren ModlessChatTrans.exe ModlessChatTrans_v$version.exe
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ModlessChatTrans
        path: |
          ./ModlessChatTrans_v${{ steps.determine_version.outputs.version }}.exe
          ./third_party_licenses